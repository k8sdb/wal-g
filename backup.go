package walg

import (
	"encoding/json"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/pkg/errors"
	"io"
	"io/ioutil"
	"log"
	"strings"
)

// WalFiles represent any file generated by WAL-G.
type WalFiles interface {
	CheckExistence() (bool, error)
}

// ReaderMaker is the generic interface used by extract. It
// allows for ease of handling different file formats.
type ReaderMaker interface {
	Reader() (io.ReadCloser, error)
	Format() string
	Path() string
}

// Backup contains information about a valid backup
// generated and uploaded by WAL-G.
type Backup struct {
	Prefix Cloud
	Path   *string
	Name   *string
	Js     *string
}

// ErrLatestNotFound happens when users asks backup-fetch LATEST, but there is no backups
var ErrLatestNotFound = errors.New("No backups found")

// GetLatest sorts the backups by last modified time
// and returns the latest backup key.
func (b *Backup) GetLatest() (string, error) {
	sortTimes, err := b.GetBackups()

	if err != nil {
		return "", err
	}

	return sortTimes[0].Name, nil
}

// GetBackups receives backup descriptions and sorts them by time
func (b *Backup) GetBackups() ([]BackupTime, error) {
	return b.Prefix.GetBackups(b)
}

// Strips the backup key and returns it in its base form `base_...`.
func StripNameBackup(key string) string {
	all := strings.SplitAfter(key, "/")
	name := strings.Split(all[len(all)-1], "_backup")[0]
	return name
}

// Strips the backup WAL file name.
func StripWalFileName(key string) string {
	name := StripNameBackup(key)
	name = strings.SplitN(name, "_D_", 2)[0]

	if strings.HasPrefix(name, backupNamePrefix) {
		return name[len(backupNamePrefix):]
	}
	return ""
}

func StripWalName(key string) string {
	all := strings.SplitAfter(key, "/")
	name := strings.Split(all[len(all)-1], ".")[0]
	return name
}

// Archive contains information associated with
// a WAL archive.
type Archive struct {
	Prefix  Cloud
	Archive *string
}

// CheckExistence checks that the specified WAL file exists.
func (a *Archive) CheckExistence() (bool, error) {
	return a.Prefix.CheckExistence(a.Archive)
}

// GetETag aquires ETag of the object from S3
func (a *Archive) GetETag() (*string, error) {
	return a.Prefix.GetETag(a.Archive)
}

// GetArchive downloads the specified archive from S3.
func (a *Archive) GetArchive() (io.ReadCloser, error) {
	return a.Prefix.GetArchive(a.Archive)
}

// SentinelSuffix is a suffix of backup finish sentinel file
const SentinelSuffix = "_backup_stop_sentinel.json"

func FetchSentinel(backupName string, bk *Backup, cloud Cloud) (dto TarBallSentinelDto) {
	server := cloud.GetServer()
	latestSentinel := backupName + SentinelSuffix

	previousBackupReader := cloud.GetReaderMaker(*server + "/basebackups_005/" + latestSentinel)

	prevBackup, err := previousBackupReader.Reader()
	if err != nil {
		log.Fatalf("%+v\n", err)
	}
	sentinelDto, err := ioutil.ReadAll(prevBackup)
	if err != nil {
		log.Fatalf("%+v\n", err)
	}

	err = json.Unmarshal(sentinelDto, &dto)
	if err != nil {
		log.Fatalf("%+v\n", err)
	}
	return
}

// GetBackupPath gets path for basebackup in a bucket
func GetBackupPath(server *string) *string {
	path := *server + "/basebackups_005/"
	s := SanitizePath(path)
	return aws.String(s)
}

func SanitizePath(path string) string {
	return strings.TrimLeft(path, "/")
}
